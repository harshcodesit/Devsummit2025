<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>syNAPse</title>
    <link rel="stylesheet" href="style.css">
    <style>
        /* ------- Osmo [https://osmo.supply/] ------- */
/* Osmo UI: https://slater.app/10324/23333.css */

body {
    background-color: var(--color-neutral-900);
    color: var(--color-light);
    font-size: var(--size-font);
    margin: 0;
    padding: 0;
  }
  
  .cloneable {
    padding: var(--container-padding);
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    display: flex;
    position: relative;
  }
  
  
  .parallax__fade {
    --color-dark-rgb: 0, 0, 0;
      background: linear-gradient(to top, rgba(var(--color-dark-rgb), 1) 0%, rgba(var(--color-dark-rgb), 0.738) 19%, rgba(var(--color-dark-rgb), 0.541) 34%, rgba(var(--color-dark-rgb), 0.382) 47%, rgba(var(--color-dark-rgb), 0.278) 56.5%, rgba(var(--color-dark-rgb), 0.194) 65%, rgba(var(--color-dark-rgb), 0.126) 73%, rgba(var(--color-dark-rgb), 0.075) 80.2%, rgba(var(--color-dark-rgb), 0.042) 86.1%, rgba(var(--color-dark-rgb), 0.021) 91%, rgba(var(--color-dark-rgb), 0.008) 95.2%, rgba(var(--color-dark-rgb), 0.002) 98.2%, transparent 100%);
  }
  
  .osmo-icon-svg {
    width: 8em;
    position: relative;
  }
  
  .parallax__header {
    z-index: 2;
    padding: var(--section-padding) var(--container-padding);
    justify-content: center;
    align-items: center;
    min-height: 100svh;
    display: flex;
    position: relative;
  }
  
  .parallax {
    width: 100%;
    position: relative;
    overflow: hidden;
  }
  
  .parallax__content {
    padding: var(--section-padding) var(--container-padding);
    justify-content: center;
    align-items: center;
    min-height: 100svh;
    display: flex;
    position: relative;
  }
  
  .cover {
    object-fit: cover;
    width: 100%;
    max-width: none;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
  }
  
  .parallax__visuals {
    object-fit: cover;
    width: 100%;
    max-width: none;
    height: 120%;
    position: absolute;
    top: 0;
    left: 0;
  }
  
  .parallax__placeholder {
    z-index: 0;
    opacity: 0;
    object-fit: cover;
    width: 100%;
    max-width: none;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
  }
  
  .parallax__layers {
    object-fit: cover;
    width: 100%;
    max-width: none;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    overflow: hidden;
  }
  
  .cover-copy {
    object-fit: cover;
    width: 100%;
    max-width: none;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
  }
  
  .parallax__fade {
    z-index: 30;
    object-fit: cover;
    width: 100%;
    max-width: none;
    height: 20%;
    position: absolute;
    bottom: 0;
    left: 0;
  }
  
  .parallax__black-line-overflow {
    z-index: 20;
    background-color: var(--color-black);
    width: 100%;
    height: 2px;
    position: absolute;
    bottom: -1px;
    left: 0;
  }
  
  .parallax__title {
    columns: white;
    pointer-events: auto;
    text-align: center;
    text-transform: none;
    margin-top: 0;
    margin-bottom: .1em;
    margin-right: .075em;
    font-family: PP Neue Corp Wide, sans-serif;
    font-size: 11vw;
    font-weight: 800;
    line-height: 1;
    position: relative;
  }
  
  .parallax__radial-gradient {
    z-index: 10;
    background-image: radial-gradient(circle farthest-corner at 50% 50%, transparent, var(--color-black));
    opacity: .5;
    pointer-events: none;
    mix-blend-mode: multiply;
    position: fixed;
    inset: 0;
  }
  
  .parallax__layer-title {
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100svh;
    display: flex;
    position: absolute;
    top: 0;
    left: 0;
  }
  
  .parallax__layer-img {
    pointer-events: none;
    object-fit: cover;
    width: 100%;
    max-width: none;
    height: 117.5%;
    position: absolute;
    top: -17.5%;
    left: 0;
  }
  
  .parallax__layer-img.is-third {
    top: -20%;
  }
  
  @font-face {
    font-family: 'PP Neue Corp Wide';
    src: url('https://cdn.prod.website-files.com/671752cd4027f01b1b8f1c7f/6717e399d30a606fed425914_PPNeueCorp-WideUltrabold.woff2') format('woff2');
    font-weight: 800;
    font-style: normal;
    font-display: swap;
  }








/* Card Section Css */
.mm {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-template-rows: 1fr;
  place-items: center;
  min-height: 100vh;
  background-color: #0C0C0C;
}

/* Content */

.content {
  padding-left: 120px;
  color: black;
  user-select: none;
}

.content h1 {
  
  font-size: clamp(2.5rem, 4vw, 6rem);
  font-weight: 700;
  background: -webkit-linear-gradient(0deg, #f76591, #ffc16f);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  line-height: 1.1;
  margin-bottom: 36px;
  
}

.content p {
  font-size: clamp(0.9rem, 4vw, 1.2rem);
  line-height: 1.6;
  padding-right: 100px;
  color: wheat;
}

.btn {
  background-color: #f76591;
  background-image: linear-gradient(-180deg, #ffc16f, #f76591);
  font-size: clamp(0.8rem, 8vw, 0.9rem);
  font-weight: 600;
  color: #fff;
  width: max-content;
  outline: 0;
  border: 0;
  border-radius: 6px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 10px 20px;
  margin-top: 26px;
  text-align: center;
  transform: scale(1);
  transition: all 0.2s ease-in;
  cursor: pointer;
  touch-action: manipulation;
  user-select: none;
  -webkit-user-select: none;
  pointer-events: auto;
}

.btn:hover {
  box-shadow: 0 4px 10px rgba(247, 101, 145, 0.5);
  transform: scale(0.98);
}

/* Stacked carsCard.carsCards */

.stack {
  position: relative;
}

.card {
  position: absolute;
  transform: translate(-50%, -50%);
  top: 50%;
  left: 50%;
  width: 350px;
  height: 500px;
  border-radius: 2rem;
  box-shadow: 0 5px 10px 0 rgba(0, 0, 0, 0.25),
    0 15px 20px 0 rgba(0, 0, 0, 0.125);
  transition: transform 0.6s;
  user-select: none;
}

.card img {
  display: block;
  width: 100%;
  height: 100%;
  border-radius: inherit;
  object-fit: cover;
  pointer-events: none;
}

.card:nth-last-child(n + 5) {
  --x: calc(-50% + 90px);
  transform: translate(var(--x), -50%) scale(0.85);
  box-shadow: 0 0 1px 1px rgba(0, 0, 0, 0.01);
}

.card:nth-last-child(4) {
  --x: calc(-50% + 60px);
  transform: translate(var(--x), -50%) scale(0.9);
}

.card:nth-last-child(3) {
  --x: calc(-50% + 30px);
  transform: translate(var(--x), -50%) scale(0.95);
}

.card:nth-last-child(2) {
  --x: calc(-50%);
  transform: translate(var(--x), -50%) scale(1);
}

.card:nth-last-child(1) {
  --x: calc(-50% - 30px);
  transform: translate(var(--x), -50%) scale(1.05);
}

.card:nth-last-child(1) img {
  box-shadow: 0 1px 5px 5px rgba(255, 193, 111, 0.5);
}

.swap {
  animation: swap 1.3s ease-out forwards;
}

@keyframes swap {
  30% {
    transform: translate(calc(var(--x) - 250px), -50%) scale(0.85) rotate(-5deg)
      rotateY(65deg);
  }
  100% {
    transform: translate(calc(var(--x) - 30px), -50%) scale(0.5);
    z-index: -1;
  }
}

/* Media queries for keyframes */

@media (max-width: 1200px) {
  @keyframes swap {
    30% {
      transform: translate(calc(var(--x) - 200px), -50%) scale(0.85)
        rotate(-5deg) rotateY(65deg);
    }

    100% {
      transform: translate(calc(var(--x) - 30px), -50%) scale(0.5);
      z-index: -1;
    }
  }
}

@media (max-width: 1050px) {
  @keyframes swap {
    30% {
      transform: translate(calc(var(--x) - 150px), -50%) scale(0.85)
        rotate(-5deg) rotateY(65deg);
    }

    100% {
      transform: translate(calc(var(--x) - 30px), -50%) scale(0.5);
      z-index: -1;
    }
  }
}

/* Media queries for other classes */

@media (max-width: 1200px) {
  .content {
    padding-left: 80px;
  }

  .content p {
    padding-right: 40px;
  }

  .card {
    width: 250px;
    height: 380px;
  }
}

@media (max-width: 1050px) {
  .content {
    padding-left: 60px;
  }

  .content p {
    line-height: 1.5;
  }

  .card {
    width: 220px;
    height: 350px;
  }
}

@media (max-width: 990px) {
  .content p {
    padding-right: 0;
  }

  .card {
    width: 200px;
    height: 300px;
  }
}

@media (max-width: 950px) {
  .mm {
    grid-template-columns: 1fr;
    grid-template-rows: 4fr 3fr;
    grid-template-areas:
      "stacked"
      "content";
  }

  .content {
    grid-area: content;
    text-align: center;
    padding: 0 90px;
  }

  .btn {
    margin-bottom: 30px;
  }

  .stack {
    grid-area: stacked;
  }
}

@media (max-width: 650px) {
  .mm {
    grid-template-rows: 1fr 1fr;
  }

  .content {
    padding: 0 50px;
  }

  .content h1 {
    padding-left: 0;
  }

  .btn {
    padding: 8px 16px;
  }

  .card {
    width: 180px;
    height: 260px;
  }
}
    </style>
</head>
  <body>
  
    <div class="parallax">
      
        <section class="parallax__header">
          <div class="parallax__visuals">
            <div class="parallax__black-line-overflow"></div>
            <div data-parallax-layers class="parallax__layers">
              <img src="https://cdn.prod.website-files.com/671752cd4027f01b1b8f1c7f/6717795be09b462b2e8ebf71_osmo-parallax-layer-3.webp" loading="eager" width="800" data-parallax-layer="1" alt="" class="parallax__layer-img">
              <img src="https://cdn.prod.website-files.com/671752cd4027f01b1b8f1c7f/6717795b4d5ac529e7d3a562_osmo-parallax-layer-2.webp" loading="eager" width="800" data-parallax-layer="2" alt="" class="parallax__layer-img">
              <div data-parallax-layer="3" class="parallax__layer-title">
                <h2 class="parallax__title" style="color: wheat;">syNAPse </h2>
              </div>
              <img src="https://cdn.prod.website-files.com/671752cd4027f01b1b8f1c7f/6717795bb5aceca85011ad83_osmo-parallax-layer-1.webp" loading="eager" width="800" data-parallax-layer="4" alt="" class="parallax__layer-img">
            </div>
            <div class="parallax__fade"></div>
          </div>
        </section>
        
      </div>
      <div class="mm">
        <div class="content">
          <h1>Weave Your Dreams into Reality</h1>
          <p>
            📝 Step 1: Share Your Dream
            Write down your dream, give it a title, and tag emotions or themes (e.g., mystical, adventure, surreal). You can also generate a dream-inspired image.
            <br>
            <br>
            👍 Step 2: Vote & Engage
            Explore other users’ dreams and upvote the most fascinating ones. Comment, discuss interpretations, and connect with dreamers who share similar themes.
            <br>
            <br>
            🌍 Step 3: Expand the DreamWorld
            Join multiplayer Dream Battles to continue evolving dreams. Winning entries become part of the Dream Map, shaping a vast interconnected dream universe!
          </p>
          <form action="/submit" method="GET">
          <button class="btn">Join the Dream League</button></form>
        </div>
    
        <div class="stack">
          <div class="card">
            <img
              src="./images/imgSeven.jpg"
              alt="" />
          </div>
          <div class="card">
            <img
              src="./images/imgTWO.jpg"
              alt="" />
          </div>
          <div class="card">
            <img
              src="./images//IMGthree.jpg"
              alt="" />
          </div>
          <div class="card">
            <img
              src="./images/imgFour.jpg"
              alt="" />
          </div>
          <div class="card">
            <img
              src="./images/imgFive.jpg"
              alt="" />
          </div>
          <div class="card">
            <img
              src="./images/imgSix.jpg"
              alt="" />
          </div>
        </div>
        <br>
        </div>








      <script src="https://cdn.jsdelivr.net/npm/gsap@3.12.5/dist/gsap.min.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/gsap@3.12.5/dist/ScrollTrigger.min.js"></script>
      <script src="https://unpkg.com/lenis@1.1.14/dist/lenis.min.js"></script>
      <script>// ------- Osmo [https://osmo.supply/] ------- //

        document.addEventListener("DOMContentLoaded", () => {
            // Register GSAP Plugins
          gsap.registerPlugin(ScrollTrigger);
          // Parallax Layers
          document.querySelectorAll('[data-parallax-layers]').forEach((triggerElement) => {
            let tl = gsap.timeline({
              scrollTrigger: {
                trigger: triggerElement,
                start: "0% 0%",
                end: "100% 0%",
                scrub: 0
              }
            });
            const layers = [
              { layer: "1", yPercent: 70 },
              { layer: "2", yPercent: 55 },
              { layer: "3", yPercent: 40 },
              { layer: "4", yPercent: 10 }
            ];
            layers.forEach((layerObj, idx) => {
              tl.to(
                triggerElement.querySelectorAll(`[data-parallax-layer="${layerObj.layer}"]`),
                {
                  yPercent: layerObj.yPercent,
                  ease: "none"
                },
                idx === 0 ? undefined : "<"
              );
            });
          });
        });
        /* Lenis */
        const lenis = new Lenis();
        lenis.on('scroll', ScrollTrigger.update);
        gsap.ticker.add((time) => {lenis.raf(time * 1000);});
        gsap.ticker.lagSmoothing(0);
        
        
        
        
        // Card carousel
        const stack = document.querySelector(".stack");
        const cards = Array.from(stack.children)
          .reverse()
          .filter((child) => child.classList.contains("card"));
        
        cards.forEach((card) => stack.appendChild(card));
        
        function moveCard() {
          const lastCard = stack.lastElementChild;
          if (lastCard.classList.contains("card")) {
            lastCard.classList.add("swap");
        
            setTimeout(() => {
              lastCard.classList.remove("swap");
              stack.insertBefore(lastCard, stack.firstElementChild);
            }, 1200);
          }
        }
        
        let autoplayInterval = setInterval(moveCard, 4000);
        
        stack.addEventListener("click", function (e) {
          const card = e.target.closest(".card");
          if (card && card === stack.lastElementChild) {
            card.classList.add("swap");
        
            setTimeout(() => {
              card.classList.remove("swap");
              stack.insertBefore(card, stack.firstElementChild);
            }, 1200);
          }
        });</script>
    
</body>
</html>